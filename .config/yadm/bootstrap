#!/usr/bin/env python3

import os
import stat
from pathlib import Path
from subprocess import run

import requests

HOME = Path.home()
NVIM_URL = "https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage"
NVIM_INSTALL = f"{HOME}/.local/bin/nvim"
DEV_REQUIREMENTS = f"{HOME}/.scripts/dev_requirements.txt"
REQUIREMENTS = f"{HOME}/.scripts/requirements.txt"
PACKAGES = f"{HOME}/.scripts/packages.txt"
NPM_PACKAGES = f"{HOME}/.scripts/npm_packages.txt"
SYMLINKS = {
    f"{HOME}/.git": f"{HOME}/.config/yadm/repo.git/",
    f"{HOME}/.tmate.conf": f"{HOME}/.tmux.conf",
}


def log(text):
    print(f"\033[93m{text}\033[00m")


def sh(cmd, check=True, **kwargs):
    print(f"\033[96m{cmd}\033[00m")
    return run(cmd, shell=True, check=check, **kwargs)


def download_file(url, destination):
    log(f"Downloading {url} to {destination}")
    request = requests.get(url)
    with open(destination, "wb") as f:
        f.write(request.content)


def make_executable(file_name):
    os.chmod(file_name, os.stat(file_name).st_mode | stat.S_IEXEC)


def install_latest_nvim():
    log("Installing latest nvim")
    sh(f"rm -f {NVIM_INSTALL}")
    download_file(NVIM_URL, NVIM_INSTALL)
    make_executable(NVIM_INSTALL)
    sh("git config --global core.editor nvim")


def install_flatpak_packages():
    sh(
        "flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo"
    )
    for name, package in [
        ("firefox", "org.mozilla.firefox"),
        ("slack", "com.slack.Slack"),
        ("chrome", "com.google.Chrome"),
        ("telegram", "org.telegram.desktop"),
        ("discord", "com.discordapp.Discord"),
        ("spotify", "com.spotify.Client"),
    ]:
        sh(f"rm -f {HOME}/.local/bin/{name}")
        sh(f"flatpak install -y flathub {package}")
        sh(f"ln -s /var/lib/flatpak/exports/bin/{package} {HOME}/.local/bin/{name}")


def install_packages():
    sh(f"xargs -a {PACKAGES} sudo apt-get install")


def install_requirements():
    sh(f"pip3 install -r {DEV_REQUIREMENTS} --break-system-packages")
    sh(f"pip3 install -r {REQUIREMENTS} --break-system-packages")


def install_npm_packages():
    sh(f"xargs -a {NPM_PACKAGES} sudo npm install -g")


def install_i3():
    sh(
       "/usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2024.03.04_all.deb keyring.deb SHA256:f9bb4340b5ce0ded29b7e014ee9ce788006e9bbfe31e96c09b2118ab91fca734"
    )
    sh("sudo apt install ./keyring.deb")
    sh(
        "echo \"deb http://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe\" | sudo tee /etc/apt/sources.list.d/sur5r-i3.list"
    )
    sh("rm keyring.deb")
    sh("sudo apt update")
    sh("sudo apt install i3 i3blocks")


def install_picom():
    sh("sudo apt install picom")


def install_nerdfonts():
    cwd = f"{HOME}/.fonts"
    zip = "JetBrainsMono.zip"
    sh(f"mkdir -p {cwd}")
    sh(
        f"wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/{zip}",
        cwd=cwd,
    )
    sh(f"unzip -o {zip}", cwd=cwd)
    sh(f"rm -f {zip}", cwd=cwd)
    sh("fc-cache -f")


def install_symlinks():
    for source, target in SYMLINKS.items():
        try:
            Path(source).symlink_to(target)
            log(f"Installed symlink from {target} to {source}")
        except FileExistsError:
            pass


def install_newer_node_version():
    VERSION = "20"
    KEYRING = "/etc/apt/keyrings/nodesource.gpg"
    sh(f"sudo rm -f {KEYRING}")
    sh("sudo mkdir -p /etc/apt/keyrings")
    sh(
        f"curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o {KEYRING}"
    )
    sh(
        f'echo "deb [signed-by={KEYRING}] https://deb.nodesource.com/node_{VERSION}.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list'
    )
    sh("sudo apt-get update")
    sh("sudo apt-get install -y nodejs")


def install_alacritty():
    cwd = f"{HOME}/Git/alacritty"
    sh(f"rm -rf {cwd}")
    sh(f"mkdir -p {HOME}/Git")
    sh("git clone https://github.com/alacritty/alacritty", cwd=f"{HOME}/Git")
    sh("rustup override set stable", cwd=cwd)
    sh("rustup update stable", cwd=cwd)
    sh(
        "sudo apt-get install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3"
    )
    sh("cargo build --release", cwd=cwd)
    sh("sudo tic -xe alacritty,alacritty-direct extra/alacritty.info", cwd=cwd)
    sh(f"rm -f {HOME}/.local/bin/alacritty")
    sh(f"sudo cp target/release/alacritty {HOME}/.local/bin/", cwd=cwd)


def install_crontab():
    sh(f"crontab {HOME}/.scripts/crontab")


def main():
    install_packages()
    install_flatpak_packages()
    install_latest_nvim()
    install_newer_node_version()
    install_requirements()
    install_npm_packages()
    install_i3()
    install_picom()
    install_symlinks()
    install_crontab()
    install_nerdfonts()
    install_alacritty()
    sh("sudo chsh -s $(which zsh)")
    sh("systemctl --user enable syncthing.service")
    sh(f"sudo sh {HOME}/.scripts/install_pam_autologin.sh")


if __name__ == "__main__":
    main()
